{"ast":null,"code":"var _jsxFileName = \"/var/www/src/pages/FechamentoConta.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport membros from '../apagar/listaDeMembros';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ClosingPage = ({\n  eventId,\n  onSubmit\n}) => {\n  _s();\n  const [participants, setParticipants] = useState(membros); // Estado para armazenar os participantes\n  const [products, setProducts] = useState([]); // Estado para armazenar os produtos (ainda não utilizado)\n  const [selectedParticipants, setSelectedParticipants] = useState([]); // Estado para armazenar participantes selecionados\n\n  // Fetch para buscar participantes e produtos da rota correta\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        /* Consulta de participantes no banco \r\n        // Fetch para participantes\r\n        const participantsResponse = await fetch('/participants'); // Substitua pela URL correta da API\r\n        const participantsData = await participantsResponse.json();\r\n        setParticipants(participantsData); */\n\n        // Fetch para produtos do evento (se necessário, pode ser removido se não estiver em uso)\n        const productsResponse = await fetch(`/events/${eventId}/products`); // Chama a rota que retorna os produtos\n        const productsData = await productsResponse.json(); // Converte a resposta para JSON\n        setProducts(productsData); // Atualiza o estado com os dados dos produtos\n      } catch (error) {\n        console.error('Erro ao buscar dados:', error); // Loga erro no console, se ocorrer\n      }\n    };\n    fetchData(); // Executa a função fetchData ao carregar o componente\n  }, [eventId]); // Dependência para refazer o fetch se eventId mudar\n\n  // Função para marcar presença dos participantes\n  const handlePresenceChange = (participantId, isPresent) => {\n    if (isPresent) {\n      const selectedParticipant = participants.find(p => p._id === participantId);\n      setSelectedParticipants(prev => [...prev, {\n        ...selectedParticipant,\n        consumptions: {}\n      } // Inicializa os consumos como objeto vazio\n      ]);\n    } else {\n      // Remove participante da lista de selecionados se desmarcado\n      setSelectedParticipants(prev => prev.filter(p => p._id !== participantId));\n    }\n  };\n\n  // Função para selecionar produtos consumidos pelos participantes\n  const handleProductSelection = (participantId, productId, quantity) => {\n    setSelectedParticipants(prevParticipants => prevParticipants.map(participant => {\n      if (participant._id === participantId) {\n        // Atualiza o produto consumido por este participante\n        const updatedConsumptions = {\n          ...participant.consumptions,\n          [productId]: quantity // Adiciona ou atualiza o consumo\n        };\n        return {\n          ...participant,\n          consumptions: updatedConsumptions\n        };\n      }\n      return participant; // Retorna participante inalterado\n    }));\n  };\n\n  // Função para enviar os dados finais\n  const handleSubmit = () => {\n    const data = selectedParticipants.map(participant => ({\n      _id: participant._id,\n      name: participant.name,\n      consumptions: participant.consumptions // Produtos consumidos por este participante\n    }));\n    onSubmit(data); // Envia os dados para a função final\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Fechamento da Conta\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [participants.map(participant => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: selectedParticipants.some(p => p._id === participant._id) // Marca se o participante está selecionado\n            ,\n            onChange: e => handlePresenceChange(participant._id, e.target.checked) // Atualiza presença ao mudar checkbox\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 29\n          }, this), participant.name, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this), selectedParticipants.some(p => p._id === participant._id) && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: products.map(product => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [product.name, \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                placeholder: \"Quantidade consumida\",\n                onChange: e => handleProductSelection(participant._id, product._id, e.target.value // Atualiza a quantidade consumida\n                )\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 41\n            }, this)\n          }, product._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 37\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 29\n        }, this)]\n      }, participant._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleSubmit,\n        children: \"Salvar Fechamento \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n};\n_s(ClosingPage, \"Pezia5fZDgtuQ1NVXrjNs/7GTkw=\");\n_c = ClosingPage;\nexport default ClosingPage;\nvar _c;\n$RefreshReg$(_c, \"ClosingPage\");","map":{"version":3,"names":["React","useState","useEffect","membros","jsxDEV","_jsxDEV","ClosingPage","eventId","onSubmit","_s","participants","setParticipants","products","setProducts","selectedParticipants","setSelectedParticipants","fetchData","productsResponse","fetch","productsData","json","error","console","handlePresenceChange","participantId","isPresent","selectedParticipant","find","p","_id","prev","consumptions","filter","handleProductSelection","productId","quantity","prevParticipants","map","participant","updatedConsumptions","handleSubmit","data","name","children","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","some","onChange","e","target","product","placeholder","value","onClick","_c","$RefreshReg$"],"sources":["/var/www/src/pages/FechamentoConta.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport membros from '../apagar/listaDeMembros';\r\n\r\nconst ClosingPage = ({ eventId, onSubmit }) => {\r\n    const [participants, setParticipants] = useState(membros); // Estado para armazenar os participantes\r\n    const [products, setProducts] = useState([]); // Estado para armazenar os produtos (ainda não utilizado)\r\n    const [selectedParticipants, setSelectedParticipants] = useState([]); // Estado para armazenar participantes selecionados\r\n\r\n    // Fetch para buscar participantes e produtos da rota correta\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n\r\n                /* Consulta de participantes no banco \r\n                // Fetch para participantes\r\n                const participantsResponse = await fetch('/participants'); // Substitua pela URL correta da API\r\n                const participantsData = await participantsResponse.json();\r\n                setParticipants(participantsData); */\r\n\r\n                // Fetch para produtos do evento (se necessário, pode ser removido se não estiver em uso)\r\n                const productsResponse = await fetch(`/events/${eventId}/products`); // Chama a rota que retorna os produtos\r\n                const productsData = await productsResponse.json(); // Converte a resposta para JSON\r\n                setProducts(productsData); // Atualiza o estado com os dados dos produtos\r\n            } catch (error) {\r\n                console.error('Erro ao buscar dados:', error); // Loga erro no console, se ocorrer\r\n            }\r\n        };\r\n\r\n        fetchData(); // Executa a função fetchData ao carregar o componente\r\n    }, [eventId]); // Dependência para refazer o fetch se eventId mudar\r\n\r\n    // Função para marcar presença dos participantes\r\n    const handlePresenceChange = (participantId, isPresent) => {\r\n        if (isPresent) {\r\n            const selectedParticipant = participants.find((p) => p._id === participantId);\r\n            setSelectedParticipants((prev) => [\r\n                ...prev,\r\n                { ...selectedParticipant, consumptions: {} }, // Inicializa os consumos como objeto vazio\r\n            ]);\r\n        } else {\r\n            // Remove participante da lista de selecionados se desmarcado\r\n            setSelectedParticipants((prev) =>\r\n                prev.filter((p) => p._id !== participantId)\r\n            );\r\n        }\r\n    };\r\n\r\n    // Função para selecionar produtos consumidos pelos participantes\r\n    const handleProductSelection = (participantId, productId, quantity) => {\r\n        setSelectedParticipants((prevParticipants) =>\r\n            prevParticipants.map((participant) => {\r\n                if (participant._id === participantId) {\r\n                    // Atualiza o produto consumido por este participante\r\n                    const updatedConsumptions = {\r\n                        ...participant.consumptions,\r\n                        [productId]: quantity, // Adiciona ou atualiza o consumo\r\n                    };\r\n                    return { ...participant, consumptions: updatedConsumptions };\r\n                }\r\n                return participant; // Retorna participante inalterado\r\n            })\r\n        );\r\n    };\r\n\r\n    // Função para enviar os dados finais\r\n    const handleSubmit = () => {\r\n        const data = selectedParticipants.map((participant) => ({\r\n            _id: participant._id,\r\n            name: participant.name,\r\n            consumptions: participant.consumptions, // Produtos consumidos por este participante\r\n        }));\r\n        onSubmit(data); // Envia os dados para a função final\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h3>Fechamento da Conta</h3>\r\n            <form>\r\n                {participants.map((participant) => (\r\n                    <div key={participant._id}>\r\n                        <label>\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                checked={selectedParticipants.some((p) => p._id === participant._id)} // Marca se o participante está selecionado\r\n                                onChange={(e) =>\r\n                                    handlePresenceChange(participant._id, e.target.checked) // Atualiza presença ao mudar checkbox\r\n                                }\r\n                            />\r\n                            {participant.name} {/* Exibe o nome do participante */}\r\n                        </label>\r\n\r\n                        {/* Seleção de produtos consumidos apenas se o participante estiver presente */}\r\n                        {selectedParticipants.some((p) => p._id === participant._id) && (\r\n                            <div>\r\n                                {products.map((product) => (\r\n                                    <div key={product._id}>\r\n                                        <label>\r\n                                            {product.name} {/* Exibe o nome do produto */}\r\n                                            <input\r\n                                                type=\"number\"\r\n                                                placeholder=\"Quantidade consumida\"\r\n                                                onChange={(e) =>\r\n                                                    handleProductSelection(\r\n                                                        participant._id,\r\n                                                        product._id,\r\n                                                        e.target.value // Atualiza a quantidade consumida\r\n                                                    )\r\n                                                }\r\n                                            />\r\n                                        </label>\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                ))}\r\n                <button type=\"button\" onClick={handleSubmit}>\r\n                    Salvar Fechamento {/* Botão para salvar os dados de fechamento */}\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ClosingPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}