{"ast":null,"code":"var _jsxFileName = \"/var/www/src/pages/FechamentoConta.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport membros from '../apagar/listaDeMembros';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ClosingPage = ({\n  eventId,\n  onSubmit\n}) => {\n  _s();\n  const [participants, setParticipants] = useState(membros); // Estado para armazenar os participantes\n  const [products, setProducts] = useState([]); // Estado para armazenar os produtos (ainda não utilizado)\n  const [selectedParticipants, setSelectedParticipants] = useState([]); // Estado para armazenar participantes selecionados\n  const [newVisitorName, setNewVisitorName] = useState(''); // Estado para o nome do visitante\n\n  // Fetch para buscar participantes e produtos da rota correta\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        /* Consulta de participantes no banco \r\n        // Fetch para participantes\r\n        const participantsResponse = await fetch('/participants'); // Substitua pela URL correta da API\r\n        const participantsData = await participantsResponse.json();\r\n        setParticipants(participantsData); */\n\n        // Fetch para produtos do evento (se necessário, pode ser removido se não estiver em uso)\n        const productsResponse = await fetch(`/events/${eventId}/products`); // Chama a rota que retorna os produtos\n        const productsData = await productsResponse.json(); // Converte a resposta para JSON\n        setProducts(productsData); // Atualiza o estado com os dados dos produtos\n      } catch (error) {\n        console.error('Erro ao buscar dados:', error); // Loga erro no console, se ocorrer\n      }\n    };\n    fetchData(); // Executa a função fetchData ao carregar o componente\n  }, [eventId]); // Dependência para refazer o fetch se eventId mudar\n\n  const handlePresenceChange = (participantId, isPresent) => {\n    setSelectedParticipants(prevSelected => {\n      if (isPresent) {\n        // Verifica se o participante já está presente na lista de selecionados\n        if (prevSelected.some(p => p._id === participantId)) {\n          console.log(`Participante já incluído: ${participantId}`);\n          return prevSelected;\n        }\n\n        // Adiciona o participante à lista de selecionados\n        const selectedParticipant = participants.find(p => p._id === participantId);\n        console.log(`Incluindo participante:`, selectedParticipant);\n        return [...prevSelected, {\n          ...selectedParticipant,\n          consumptions: {}\n        } // Inicializa os consumos como objeto vazio\n        ];\n      } else {\n        // Remove o participante da lista de selecionados\n        console.log(`Removendo participante: ${participantId}`);\n        return prevSelected.filter(p => p._id !== participantId);\n      }\n    });\n  };\n\n  // Função para selecionar produtos consumidos pelos participantes\n  const handleProductSelection = (participantId, productId, quantity) => {\n    setSelectedParticipants(prevParticipants => prevParticipants.map(participant => {\n      if (participant._id === participantId) {\n        // Atualiza o produto consumido por este participante\n        const updatedConsumptions = {\n          ...participant.consumptions,\n          [productId]: quantity // Adiciona ou atualiza o consumo\n        };\n        return {\n          ...participant,\n          consumptions: updatedConsumptions\n        };\n      }\n      return participant; // Retorna participante inalterado\n    }));\n  };\n\n  // Função para enviar os dados finais\n  const handleSubmit = () => {\n    const data = selectedParticipants.map(participant => ({\n      _id: participant._id,\n      name: participant.name,\n      consumptions: participant.consumptions // Produtos consumidos por este participante\n    }));\n    if (onSubmit) {\n      onSubmit(data); // Verifique se a função está definida\n    } else {\n      console.error('onSubmit não está definido');\n    }\n  };\n\n  // Função para adicionar um visitante ao evento\n  const handleAddVisitor = () => {\n    if (newVisitorName.trim()) {\n      const newVisitor = {\n        _id: `visitor-${Date.now()}`,\n        // Gera um ID único temporário\n        name: newVisitorName,\n        consumptions: {} // Inicializa consumos como um objeto vazio\n      };\n      setSelectedParticipants(prev => [...prev, newVisitor]); // Adiciona o visitante à lista de selecionados\n      participants.push(newVisitor); // Adiciona o visitante à lista de participantes\n      setNewVisitorName(''); // Limpa o campo de input\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Fechamento da Conta\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [participants.map(participant => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: selectedParticipants.some(p => p._id === participant._id) // Marca se o participante está selecionado\n            ,\n            onChange: e => handlePresenceChange(participant._id, e.target.checked) // Atualiza presença ao mudar checkbox\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 29\n          }, this), participant.name, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 25\n        }, this), selectedParticipants.some(p => p._id === participant._id) && products.map(product => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [product.name, \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              placeholder: \"Quantidade consumida\",\n              onChange: e => handleProductSelection(participant._id, product._id, e.target.value // Atualiza a quantidade consumida\n              )\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 37\n          }, this)\n        }, product._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 33\n        }, this))]\n      }, participant._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Adicionar Visitante\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newVisitorName,\n          placeholder: \"Nome do Visitante\",\n          onChange: e => setNewVisitorName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleAddVisitor,\n          children: \"Adicionar Visitante\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleSubmit,\n        children: \"Salvar Fechamento\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Membros Presentes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: selectedParticipants.length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n};\n_s(ClosingPage, \"OzDWd0Ls6wJwRzVM32ANf/alD5U=\");\n_c = ClosingPage;\nexport default ClosingPage;\nvar _c;\n$RefreshReg$(_c, \"ClosingPage\");","map":{"version":3,"names":["React","useState","useEffect","membros","jsxDEV","_jsxDEV","ClosingPage","eventId","onSubmit","_s","participants","setParticipants","products","setProducts","selectedParticipants","setSelectedParticipants","newVisitorName","setNewVisitorName","fetchData","productsResponse","fetch","productsData","json","error","console","handlePresenceChange","participantId","isPresent","prevSelected","some","p","_id","log","selectedParticipant","find","consumptions","filter","handleProductSelection","productId","quantity","prevParticipants","map","participant","updatedConsumptions","handleSubmit","data","name","handleAddVisitor","trim","newVisitor","Date","now","prev","push","children","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","onChange","e","target","product","placeholder","value","onClick","length","_c","$RefreshReg$"],"sources":["/var/www/src/pages/FechamentoConta.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport membros from '../apagar/listaDeMembros';\r\n\r\nconst ClosingPage = ({ eventId, onSubmit }) => {\r\n    const [participants, setParticipants] = useState(membros); // Estado para armazenar os participantes\r\n    const [products, setProducts] = useState([]); // Estado para armazenar os produtos (ainda não utilizado)\r\n    const [selectedParticipants, setSelectedParticipants] = useState([]); // Estado para armazenar participantes selecionados\r\n    const [newVisitorName, setNewVisitorName] = useState(''); // Estado para o nome do visitante\r\n\r\n\r\n    // Fetch para buscar participantes e produtos da rota correta\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n\r\n                /* Consulta de participantes no banco \r\n                // Fetch para participantes\r\n                const participantsResponse = await fetch('/participants'); // Substitua pela URL correta da API\r\n                const participantsData = await participantsResponse.json();\r\n                setParticipants(participantsData); */\r\n\r\n                // Fetch para produtos do evento (se necessário, pode ser removido se não estiver em uso)\r\n                const productsResponse = await fetch(`/events/${eventId}/products`); // Chama a rota que retorna os produtos\r\n                const productsData = await productsResponse.json(); // Converte a resposta para JSON\r\n                setProducts(productsData); // Atualiza o estado com os dados dos produtos\r\n            } catch (error) {\r\n                console.error('Erro ao buscar dados:', error); // Loga erro no console, se ocorrer\r\n            }\r\n        };\r\n\r\n        fetchData(); // Executa a função fetchData ao carregar o componente\r\n    }, [eventId]); // Dependência para refazer o fetch se eventId mudar\r\n\r\n    const handlePresenceChange = (participantId, isPresent) => {\r\n        setSelectedParticipants((prevSelected) => {\r\n            if (isPresent) {\r\n                // Verifica se o participante já está presente na lista de selecionados\r\n                if (prevSelected.some(p => p._id === participantId)) {\r\n                    console.log(`Participante já incluído: ${participantId}`);\r\n                    return prevSelected;\r\n                }\r\n    \r\n                // Adiciona o participante à lista de selecionados\r\n                const selectedParticipant = participants.find((p) => p._id === participantId);\r\n                console.log(`Incluindo participante:`, selectedParticipant);\r\n                return [\r\n                    ...prevSelected,\r\n                    { ...selectedParticipant, consumptions: {} }, // Inicializa os consumos como objeto vazio\r\n                ];\r\n            } else {\r\n                // Remove o participante da lista de selecionados\r\n                console.log(`Removendo participante: ${participantId}`);\r\n                return prevSelected.filter((p) => p._id !== participantId);\r\n            }\r\n        });\r\n    };\r\n    \r\n    \r\n\r\n    // Função para selecionar produtos consumidos pelos participantes\r\n    const handleProductSelection = (participantId, productId, quantity) => {\r\n        setSelectedParticipants((prevParticipants) =>\r\n            prevParticipants.map((participant) => {\r\n                if (participant._id === participantId) {\r\n                    // Atualiza o produto consumido por este participante\r\n                    const updatedConsumptions = {\r\n                        ...participant.consumptions,\r\n                        [productId]: quantity, // Adiciona ou atualiza o consumo\r\n                    };\r\n                    return { ...participant, consumptions: updatedConsumptions };\r\n                }\r\n                return participant; // Retorna participante inalterado\r\n            })\r\n        );\r\n    };\r\n\r\n    // Função para enviar os dados finais\r\n    const handleSubmit = () => {\r\n        const data = selectedParticipants.map((participant) => ({\r\n            _id: participant._id,\r\n            name: participant.name,\r\n            consumptions: participant.consumptions, // Produtos consumidos por este participante\r\n        }));\r\n        if (onSubmit) {\r\n            onSubmit(data); // Verifique se a função está definida\r\n        } else {\r\n            console.error('onSubmit não está definido');\r\n        }\r\n    };\r\n\r\n     // Função para adicionar um visitante ao evento\r\n     const handleAddVisitor = () => {\r\n        if (newVisitorName.trim()) {\r\n            const newVisitor = {\r\n                _id: `visitor-${Date.now()}`, // Gera um ID único temporário\r\n                name: newVisitorName,\r\n                consumptions: {}, // Inicializa consumos como um objeto vazio\r\n            };\r\n            setSelectedParticipants((prev) => [...prev, newVisitor]); // Adiciona o visitante à lista de selecionados\r\n            participants.push(newVisitor); // Adiciona o visitante à lista de participantes\r\n            setNewVisitorName(''); // Limpa o campo de input\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Fechamento da Conta</h1>\r\n            <form>\r\n                {participants.map((participant) => (\r\n                    <div key={participant._id}>\r\n                        <label>\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                checked={selectedParticipants.some(p => p._id === participant._id)} // Marca se o participante está selecionado\r\n                                onChange={(e) =>\r\n                                    handlePresenceChange(participant._id, e.target.checked) // Atualiza presença ao mudar checkbox\r\n                                }\r\n                            />\r\n                            {participant.name} {/* Exibe o nome do participante */}\r\n                        </label>\r\n                        {/* Seleção de produtos consumidos apenas se o participante estiver presente */}\r\n                        {selectedParticipants.some(p => p._id === participant._id) && (\r\n                            products.map((product) => (\r\n                                <div key={product._id}>\r\n                                    <label>\r\n                                        {product.name} {/* Exibe o nome do produto */}\r\n                                        <input\r\n                                            type=\"number\"\r\n                                            placeholder=\"Quantidade consumida\"\r\n                                            onChange={(e) =>\r\n                                                handleProductSelection(\r\n                                                    participant._id,\r\n                                                    product._id,\r\n                                                    e.target.value // Atualiza a quantidade consumida\r\n                                                )\r\n                                            }\r\n                                        />\r\n                                    </label>\r\n                                </div>\r\n                            ))\r\n                        )}\r\n                    </div>\r\n                ))}\r\n                {/* Formulário para adicionar visitantes */}\r\n                <div>\r\n                    <h4>Adicionar Visitante</h4>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={newVisitorName}\r\n                        placeholder=\"Nome do Visitante\"\r\n                        onChange={(e) => setNewVisitorName(e.target.value)}\r\n                    />\r\n                    <button type=\"button\" onClick={handleAddVisitor}>\r\n                        Adicionar Visitante\r\n                    </button>\r\n                </div>\r\n                <button type=\"button\" onClick={handleSubmit}>Salvar Fechamento</button>\r\n            </form>\r\n            <div>\r\n                <h2>Membros Presentes</h2>\r\n                <p>{selectedParticipants.length}</p>\r\n                </div>\r\n\r\n        </div>\r\n       \r\n    );\r\n};\r\n\r\nexport default ClosingPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}