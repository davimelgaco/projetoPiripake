{"ast":null,"code":"var _jsxFileName = \"/var/www/src/pages/FechamentoConta.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ClosingPage = ({\n  eventId,\n  onSubmit\n}) => {\n  _s();\n  const [participants, setParticipants] = useState([]);\n  const [products, setProducts] = useState([]);\n  const [selectedParticipants, setSelectedParticipants] = useState([]);\n\n  // Fetch para buscar participantes e produtos da rota correta\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch para participantes\n        const participantsResponse = await fetch('/participants'); // Substitua pela URL correta da API\n        const participantsData = await participantsResponse.json();\n        setParticipants(participantsData);\n\n        // Fetch para produtos do evento (ou outra rota, conforme necessário)\n        const productsResponse = await fetch(`/events/${eventId}/products`); // Substitua pela URL correta da API\n        const productsData = await productsResponse.json();\n        setProducts(productsData);\n      } catch (error) {\n        console.error('Erro ao buscar dados:', error);\n      }\n    };\n    fetchData();\n  }, [eventId]);\n\n  // Função para marcar presença dos participantes\n  const handlePresenceChange = (participantId, isPresent) => {\n    if (isPresent) {\n      const selectedParticipant = participants.find(p => p._id === participantId);\n      setSelectedParticipants(prev => [...prev, {\n        ...selectedParticipant,\n        consumptions: {}\n      } // Inicializa os consumos como objeto vazio\n      ]);\n    } else {\n      setSelectedParticipants(prev => prev.filter(p => p._id !== participantId));\n    }\n  };\n\n  // Função para selecionar produtos consumidos pelos participantes\n  const handleProductSelection = (participantId, productId, quantity) => {\n    setSelectedParticipants(prevParticipants => prevParticipants.map(participant => {\n      if (participant._id === participantId) {\n        // Atualiza o produto consumido por este participante\n        const updatedConsumptions = {\n          ...participant.consumptions,\n          [productId]: quantity // Adiciona ou atualiza o consumo\n        };\n        return {\n          ...participant,\n          consumptions: updatedConsumptions\n        };\n      }\n      return participant;\n    }));\n  };\n\n  // Função para enviar os dados finais\n  const handleSubmit = () => {\n    const data = selectedParticipants.map(participant => ({\n      _id: participant._id,\n      name: participant.name,\n      consumptions: participant.consumptions // Produtos consumidos por este participante\n    }));\n    onSubmit(data); // Envia para backend ou função final\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Fechamento da Conta\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [participants.map(participant => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: selectedParticipants.some(p => p._id === participant._id),\n            onChange: e => handlePresenceChange(participant._id, e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 29\n          }, this), participant.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }, this), selectedParticipants.some(p => p._id === participant._id) && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: products.map(product => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [product.name, /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                placeholder: \"Quantidade consumida\",\n                onChange: e => handleProductSelection(participant._id, product._id, e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 41\n            }, this)\n          }, product._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 37\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 29\n        }, this)]\n      }, participant._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleSubmit,\n        children: \"Salvar Fechamento\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n_s(ClosingPage, \"vqCGktyQufZnHmqTyu+GkBPPcqo=\");\n_c = ClosingPage;\nexport default ClosingPage;\nvar _c;\n$RefreshReg$(_c, \"ClosingPage\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ClosingPage","eventId","onSubmit","_s","participants","setParticipants","products","setProducts","selectedParticipants","setSelectedParticipants","fetchData","participantsResponse","fetch","participantsData","json","productsResponse","productsData","error","console","handlePresenceChange","participantId","isPresent","selectedParticipant","find","p","_id","prev","consumptions","filter","handleProductSelection","productId","quantity","prevParticipants","map","participant","updatedConsumptions","handleSubmit","data","name","children","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","some","onChange","e","target","product","placeholder","value","onClick","_c","$RefreshReg$"],"sources":["/var/www/src/pages/FechamentoConta.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst ClosingPage = ({ eventId, onSubmit }) => {\r\n    const [participants, setParticipants] = useState([]);\r\n    const [products, setProducts] = useState([]);\r\n    const [selectedParticipants, setSelectedParticipants] = useState([]);\r\n\r\n    // Fetch para buscar participantes e produtos da rota correta\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                // Fetch para participantes\r\n                const participantsResponse = await fetch('/participants'); // Substitua pela URL correta da API\r\n                const participantsData = await participantsResponse.json();\r\n                setParticipants(participantsData);\r\n\r\n                // Fetch para produtos do evento (ou outra rota, conforme necessário)\r\n                const productsResponse = await fetch(`/events/${eventId}/products`); // Substitua pela URL correta da API\r\n                const productsData = await productsResponse.json();\r\n                setProducts(productsData);\r\n            } catch (error) {\r\n                console.error('Erro ao buscar dados:', error);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, [eventId]);\r\n\r\n    // Função para marcar presença dos participantes\r\n    const handlePresenceChange = (participantId, isPresent) => {\r\n        if (isPresent) {\r\n            const selectedParticipant = participants.find((p) => p._id === participantId);\r\n            setSelectedParticipants((prev) => [\r\n                ...prev,\r\n                { ...selectedParticipant, consumptions: {} }, // Inicializa os consumos como objeto vazio\r\n            ]);\r\n        } else {\r\n            setSelectedParticipants((prev) =>\r\n                prev.filter((p) => p._id !== participantId)\r\n            );\r\n        }\r\n    };\r\n\r\n    // Função para selecionar produtos consumidos pelos participantes\r\n    const handleProductSelection = (participantId, productId, quantity) => {\r\n        setSelectedParticipants((prevParticipants) =>\r\n            prevParticipants.map((participant) => {\r\n                if (participant._id === participantId) {\r\n                    // Atualiza o produto consumido por este participante\r\n                    const updatedConsumptions = {\r\n                        ...participant.consumptions,\r\n                        [productId]: quantity, // Adiciona ou atualiza o consumo\r\n                    };\r\n                    return { ...participant, consumptions: updatedConsumptions };\r\n                }\r\n                return participant;\r\n            })\r\n        );\r\n    };\r\n\r\n    // Função para enviar os dados finais\r\n    const handleSubmit = () => {\r\n        const data = selectedParticipants.map((participant) => ({\r\n            _id: participant._id,\r\n            name: participant.name,\r\n            consumptions: participant.consumptions, // Produtos consumidos por este participante\r\n        }));\r\n        onSubmit(data); // Envia para backend ou função final\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h3>Fechamento da Conta</h3>\r\n            <form>\r\n                {participants.map((participant) => (\r\n                    <div key={participant._id}>\r\n                        <label>\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                checked={selectedParticipants.some((p) => p._id === participant._id)}\r\n                                onChange={(e) =>\r\n                                    handlePresenceChange(participant._id, e.target.checked)\r\n                                }\r\n                            />\r\n                            {participant.name}\r\n                        </label>\r\n\r\n                        {/* Seleção de produtos consumidos */}\r\n                        {selectedParticipants.some((p) => p._id === participant._id) && (\r\n                            <div>\r\n                                {products.map((product) => (\r\n                                    <div key={product._id}>\r\n                                        <label>\r\n                                            {product.name}\r\n                                            <input\r\n                                                type=\"number\"\r\n                                                placeholder=\"Quantidade consumida\"\r\n                                                onChange={(e) =>\r\n                                                    handleProductSelection(\r\n                                                        participant._id,\r\n                                                        product._id,\r\n                                                        e.target.value\r\n                                                    )\r\n                                                }\r\n                                            />\r\n                                        </label>\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                ))}\r\n                <button type=\"button\" onClick={handleSubmit}>\r\n                    Salvar Fechamento\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ClosingPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}