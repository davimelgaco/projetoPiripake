{"ast":null,"code":"var _jsxFileName = \"/var/www/src/pages/EventDetail.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport ProductsList from './../components/ProductsList';\nimport AddProductForm from './../components/AddProductForm';\nimport EditProductForm from './../components/EditProductForm';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventDetail = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [event, setEvent] = useState(null);\n  const [participants, setParticipants] = useState([]);\n  const [products, setProducts] = useState([]);\n  const [newParticipant, setNewParticipant] = useState('');\n  const [allParticipants, setAllParticipants] = useState([]); // Para armazenar todos os participantes existentes\n  const [newProduct, setNewProduct] = useState({\n    name: '',\n    price: '',\n    quantity: ''\n  });\n  const [editingProduct, setEditingProduct] = useState(null); // Estado para o produto em edição\n\n  const handleProductUpdated = updatedProduct => {\n    const updatedProducts = products.map(product => product._id === updatedProduct._id ? updatedProduct : product);\n    setProducts(updatedProducts);\n  };\n\n  // Funções para abrir e fechar o pop-up\n  const [showPopup, setShowPopup] = useState(false);\n  const [selectedParticipant, setSelectedParticipant] = useState(null);\n  const openParticipantPopup = participant => {\n    console.log('Participante selecionado:', participant);\n    setSelectedParticipant(participant); // Verifique se o participant aqui já tem `consumptions`\n    setShowPopup(true);\n  };\n  const closePopup = () => {\n    setShowPopup(false);\n  };\n  useEffect(() => {\n    // Buscar os detalhes do evento\n    axios.get(`http://localhost:5000/events/${id}`).then(response => {\n      setEvent(response.data);\n      setParticipants(response.data.participants);\n      setProducts(response.data.products);\n    }).catch(error => console.error('Erro ao buscar evento:', error));\n\n    // Buscar todos os participantes já cadastrados\n    axios.get(`http://localhost:5000/participants`).then(response => {\n      setAllParticipants(response.data);\n    }).catch(error => console.error('Erro ao buscar participantes:', error));\n  }, [id]);\n  const handleAddExistingParticipant = () => {\n    if (newParticipant) {\n      const existingParticipant = allParticipants.find(participant => participant.name === newParticipant);\n      if (existingParticipant) {\n        const updatedParticipants = [...participants, existingParticipant];\n        setParticipants(updatedParticipants);\n\n        // Atualizar o evento no backend com o novo participante\n        axios.put(`http://localhost:5000/events/${id}/participants`, {\n          participants: updatedParticipants\n        }).catch(error => console.error('Erro ao atualizar participantes no evento:', error));\n      }\n      setNewParticipant(''); // Limpar o campo de seleção\n    }\n  };\n  const handleAddNewVisitor = () => {\n    if (newParticipant) {\n      axios.post(`http://localhost:5000/participants`, {\n        name: newParticipant\n      }).then(response => {\n        const createdParticipant = response.data;\n        const updatedParticipants = [...participants, createdParticipant];\n        setParticipants(updatedParticipants);\n\n        // Atualizar o evento no backend com o novo visitante\n        axios.put(`http://localhost:5000/events/${id}/participants`, {\n          participants: updatedParticipants\n        }).catch(error => console.error('Erro ao atualizar participantes no evento:', error));\n      }).catch(error => console.error('Erro ao criar participante:', error));\n      setNewParticipant(''); // Limpar o campo de texto\n    }\n  };\n  const handleAddProduct = newProduct => {\n    if (newProduct.name && newProduct.price && newProduct.quantity) {\n      const updatedProducts = [...products, {\n        ...newProduct,\n        consumers: []\n      }];\n      setProducts(updatedProducts);\n\n      // Enviar dados atualizados ao backend\n      axios.post(`http://localhost:5000/events/${id}/products`, newProduct).catch(error => console.error('Erro ao adicionar produto:', error));\n    }\n  };\n  const handleConsumptionChange = (productIndex, participantIndex, newQuantity) => {\n    // Verifica se o novo valor de quantidade não está vazio\n    if (newQuantity === '') return;\n\n    // Clona a lista de produtos para evitar mutação direta\n    const updatedProducts = [...products];\n    // Clona a lista de participantes para evitar mutação direta\n    const updatedParticipants = [...participants];\n\n    // Acessa o participante que será atualizado\n    const participant = updatedParticipants[participantIndex];\n\n    // Atualiza a quantidade do produto específico do participante\n    // Converte newQuantity para número para evitar erros em operações matemáticas\n    participant.consumptions[productIndex].quantity = Number(newQuantity);\n\n    // Atualiza o estado dos participantes\n    setParticipants(updatedParticipants);\n\n    // Desestrutura o ID do participante para uso posterior\n    const {\n      _id: participantId\n    } = participant;\n\n    // Verifica se o participante já está na lista de consumidores do produto\n    if (updatedProducts[productIndex].consumers.includes(participantId)) {\n      // Se estiver, remove o participante da lista de consumidores\n      updatedProducts[productIndex].consumers = updatedProducts[productIndex].consumers.filter(id => id !== participantId);\n      console.log(\"Participante removido da lista de consumidores\");\n    } else {\n      // Caso contrário, adiciona o participante à lista de consumidores\n      updatedProducts[productIndex].consumers.push(participantId);\n      console.log(\"Participante adicionado na lista de consumidores\");\n    }\n\n    // Atualiza o estado dos produtos\n    setProducts(updatedProducts);\n\n    // Enviar dados atualizados ao backend\n    axios.put(`http://localhost:5000/events/${id}/products`, {\n      products: updatedProducts\n    }).catch(error => console.error('Erro ao atualizar consumo:', error));\n  };\n\n  // estado para armazenar os participantes que consumiram o produto\n  const [consumers, setConsumers] = useState([]);\n  const handleParticipantSelection = (e, participantId) => {\n    if (e.target.checked) {\n      setConsumers([...consumers, participantId]); // Adiciona o participante selecionado\n      console.log(\"Participante adicionado na lista de consumidores 2\");\n    } else {\n      setConsumers(consumers.filter(id => id !== participantId)); // Remove se desmarcado\n      console.log(\"Participante removido da lista de consumidores 2\");\n    }\n  };\n\n  //Redirecionamento para a pagina de fechamento de conta\n  const navigate = useNavigate();\n  const handleFecharConta = () => {\n    navigate(`/fechamento-conta/${id}`);\n  };\n  if (!event) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Carregando...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 24\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Detalhes do Evento: \", event.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Data: \", new Date(event.date).toLocaleDateString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Local: \", event.location]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(AddProductForm, {\n        eventId: id,\n        onProductAdded: newProduct => setProducts([...products, newProduct]),\n        participants: allParticipants // Passando a lista de participantes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ProductsList, {\n        products: products,\n        onEditProduct: product => setEditingProduct(product) // Adicione essa prop\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }, this), editingProduct && /*#__PURE__*/_jsxDEV(EditProductForm, {\n        product: editingProduct,\n        eventId: id,\n        onProductUpdated: handleProductUpdated,\n        onClose: () => setEditingProduct(null) // Para fechar o formulário\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddProduct,\n        children: \"Adicionar Produto\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFecharConta,\n      children: \"Fechar Conta\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 9\n  }, this);\n};\n_s(EventDetail, \"jQpoIXxUTcXUTx39bdNLgO8af2Q=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = EventDetail;\nexport default EventDetail;\nvar _c;\n$RefreshReg$(_c, \"EventDetail\");","map":{"version":3,"names":["React","useEffect","useState","useParams","axios","ProductsList","AddProductForm","EditProductForm","useNavigate","jsxDEV","_jsxDEV","EventDetail","_s","id","event","setEvent","participants","setParticipants","products","setProducts","newParticipant","setNewParticipant","allParticipants","setAllParticipants","newProduct","setNewProduct","name","price","quantity","editingProduct","setEditingProduct","handleProductUpdated","updatedProduct","updatedProducts","map","product","_id","showPopup","setShowPopup","selectedParticipant","setSelectedParticipant","openParticipantPopup","participant","console","log","closePopup","get","then","response","data","catch","error","handleAddExistingParticipant","existingParticipant","find","updatedParticipants","put","handleAddNewVisitor","post","createdParticipant","handleAddProduct","consumers","handleConsumptionChange","productIndex","participantIndex","newQuantity","consumptions","Number","participantId","includes","filter","push","setConsumers","handleParticipantSelection","e","target","checked","navigate","handleFecharConta","children","fileName","_jsxFileName","lineNumber","columnNumber","Date","date","toLocaleDateString","location","eventId","onProductAdded","onEditProduct","onProductUpdated","onClose","onClick","_c","$RefreshReg$"],"sources":["/var/www/src/pages/EventDetail.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport ProductsList from './../components/ProductsList';\r\nimport AddProductForm from './../components/AddProductForm';\r\nimport EditProductForm from './../components/EditProductForm';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n\r\n\r\n\r\n\r\nconst EventDetail = () => {\r\n    const { id } = useParams();\r\n    const [event, setEvent] = useState(null);\r\n    const [participants, setParticipants] = useState([]);\r\n    const [products, setProducts] = useState([]);\r\n    const [newParticipant, setNewParticipant] = useState('');\r\n    const [allParticipants, setAllParticipants] = useState([]); // Para armazenar todos os participantes existentes\r\n    const [newProduct, setNewProduct] = useState({ name: '', price: '', quantity: '' });\r\n    const [editingProduct, setEditingProduct] = useState(null); // Estado para o produto em edição\r\n\r\n\r\n\r\n    const handleProductUpdated = (updatedProduct) => {\r\n        const updatedProducts = products.map(product =>\r\n            product._id === updatedProduct._id ? updatedProduct : product\r\n        );\r\n        setProducts(updatedProducts);\r\n    };\r\n\r\n    // Funções para abrir e fechar o pop-up\r\n    const [showPopup, setShowPopup] = useState(false);\r\n    const [selectedParticipant, setSelectedParticipant] = useState(null);\r\n\r\n    const openParticipantPopup = (participant) => {\r\n        console.log('Participante selecionado:', participant);\r\n        setSelectedParticipant(participant); // Verifique se o participant aqui já tem `consumptions`\r\n        setShowPopup(true);\r\n    };\r\n\r\n    const closePopup = () => {\r\n        setShowPopup(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Buscar os detalhes do evento\r\n        axios.get(`http://localhost:5000/events/${id}`)\r\n            .then(response => {\r\n                setEvent(response.data);\r\n                setParticipants(response.data.participants);\r\n                setProducts(response.data.products);\r\n            })\r\n            .catch(error => console.error('Erro ao buscar evento:', error));\r\n\r\n        // Buscar todos os participantes já cadastrados\r\n        axios.get(`http://localhost:5000/participants`)\r\n            .then(response => {\r\n                setAllParticipants(response.data);\r\n            })\r\n            .catch(error => console.error('Erro ao buscar participantes:', error));\r\n    }, [id]);\r\n\r\n    const handleAddExistingParticipant = () => {\r\n        if (newParticipant) {\r\n            const existingParticipant = allParticipants.find(participant => participant.name === newParticipant);\r\n\r\n            if (existingParticipant) {\r\n                const updatedParticipants = [...participants, existingParticipant];\r\n                setParticipants(updatedParticipants);\r\n\r\n                // Atualizar o evento no backend com o novo participante\r\n                axios.put(`http://localhost:5000/events/${id}/participants`, { participants: updatedParticipants })\r\n                    .catch(error => console.error('Erro ao atualizar participantes no evento:', error));\r\n            }\r\n\r\n            setNewParticipant(''); // Limpar o campo de seleção\r\n        }\r\n    };\r\n\r\n    const handleAddNewVisitor = () => {\r\n        if (newParticipant) {\r\n            axios.post(`http://localhost:5000/participants`, { name: newParticipant })\r\n                .then(response => {\r\n                    const createdParticipant = response.data;\r\n                    const updatedParticipants = [...participants, createdParticipant];\r\n                    setParticipants(updatedParticipants);\r\n\r\n                    // Atualizar o evento no backend com o novo visitante\r\n                    axios.put(`http://localhost:5000/events/${id}/participants`, { participants: updatedParticipants })\r\n                        .catch(error => console.error('Erro ao atualizar participantes no evento:', error));\r\n                })\r\n                .catch(error => console.error('Erro ao criar participante:', error));\r\n\r\n            setNewParticipant(''); // Limpar o campo de texto\r\n        }\r\n    };\r\n\r\n    const handleAddProduct = (newProduct) => {\r\n        if (newProduct.name && newProduct.price && newProduct.quantity) {\r\n            const updatedProducts = [...products, { ...newProduct, consumers: [] }];\r\n            setProducts(updatedProducts);\r\n\r\n\r\n            // Enviar dados atualizados ao backend\r\n            axios.post(`http://localhost:5000/events/${id}/products`, newProduct)\r\n                .catch(error => console.error('Erro ao adicionar produto:', error));\r\n        }\r\n    };\r\n\r\n    const handleConsumptionChange = (productIndex, participantIndex, newQuantity) => {\r\n        // Verifica se o novo valor de quantidade não está vazio\r\n        if (newQuantity === '') return;\r\n\r\n        // Clona a lista de produtos para evitar mutação direta\r\n        const updatedProducts = [...products];\r\n        // Clona a lista de participantes para evitar mutação direta\r\n        const updatedParticipants = [...participants];\r\n\r\n        // Acessa o participante que será atualizado\r\n        const participant = updatedParticipants[participantIndex];\r\n\r\n        // Atualiza a quantidade do produto específico do participante\r\n        // Converte newQuantity para número para evitar erros em operações matemáticas\r\n        participant.consumptions[productIndex].quantity = Number(newQuantity);\r\n\r\n        // Atualiza o estado dos participantes\r\n        setParticipants(updatedParticipants);\r\n\r\n        // Desestrutura o ID do participante para uso posterior\r\n        const { _id: participantId } = participant;\r\n\r\n        // Verifica se o participante já está na lista de consumidores do produto\r\n        if (updatedProducts[productIndex].consumers.includes(participantId)) {\r\n            // Se estiver, remove o participante da lista de consumidores\r\n            updatedProducts[productIndex].consumers = updatedProducts[productIndex].consumers.filter(id => id !== participantId);\r\n            console.log(\"Participante removido da lista de consumidores\");\r\n\r\n        } else {\r\n            // Caso contrário, adiciona o participante à lista de consumidores\r\n            updatedProducts[productIndex].consumers.push(participantId);\r\n            console.log(\"Participante adicionado na lista de consumidores\");\r\n\r\n        }\r\n\r\n        // Atualiza o estado dos produtos\r\n        setProducts(updatedProducts);\r\n\r\n        // Enviar dados atualizados ao backend\r\n        axios.put(`http://localhost:5000/events/${id}/products`, { products: updatedProducts })\r\n            .catch(error => console.error('Erro ao atualizar consumo:', error));\r\n    };\r\n\r\n\r\n\r\n    // estado para armazenar os participantes que consumiram o produto\r\n    const [consumers, setConsumers] = useState([]);\r\n    const handleParticipantSelection = (e, participantId) => {\r\n        if (e.target.checked) {\r\n            setConsumers([...consumers, participantId]);  // Adiciona o participante selecionado\r\n            console.log(\"Participante adicionado na lista de consumidores 2\");\r\n\r\n        } else {\r\n            setConsumers(consumers.filter(id => id !== participantId));  // Remove se desmarcado\r\n            console.log(\"Participante removido da lista de consumidores 2\");\r\n\r\n        }\r\n    };\r\n\r\n    //Redirecionamento para a pagina de fechamento de conta\r\n    const navigate = useNavigate();\r\n    const handleFecharConta = () => {\r\n        navigate(`/fechamento-conta/${id}`);\r\n    };\r\n\r\n    if (!event) return <div>Carregando...</div>;\r\n\r\n    return (\r\n        <div>\r\n            <h2>Detalhes do Evento: {event.name}</h2>\r\n            <p>Data: {new Date(event.date).toLocaleDateString()}</p>\r\n            <p>Local: {event.location}</p>\r\n\r\n            {/* Adicionar Novo Produto */}\r\n            <div>\r\n                <AddProductForm\r\n                    eventId={id}\r\n                    onProductAdded={(newProduct) => setProducts([...products, newProduct])}\r\n                    participants={allParticipants} // Passando a lista de participantes\r\n                />\r\n                {/* Renderizando a lista de produtos */}\r\n                <ProductsList\r\n                    products={products}\r\n                    onEditProduct={(product) => setEditingProduct(product)} // Adicione essa prop\r\n                />\r\n\r\n                {/* Se estiver editando um produto, renderize o EditProductForm */}\r\n                {editingProduct && (\r\n                    <EditProductForm\r\n                        product={editingProduct}\r\n                        eventId={id}\r\n                        onProductUpdated={handleProductUpdated}\r\n                        onClose={() => setEditingProduct(null)} // Para fechar o formulário\r\n                    />\r\n                )}\r\n\r\n\r\n                <button onClick={handleAddProduct}>Adicionar Produto</button>\r\n            </div>\r\n\r\n            {/* Botão para fechar conta*/}\r\n            <button onClick={handleFecharConta}>Fechar Conta</button>\r\n\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default EventDetail;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}